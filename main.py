from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.keys import Keys
from webdriver_manager.chrome import ChromeDriverManager
import time
import os

USERNAME = os.getenv("CUUTRUYEN_USERNAME") 
PASSWORD = os.getenv("CUUTRUYEN_PASSWORD") 
TRUYEN_FILE = "data.txt"

def login_manual(driver):
    print("\n" + "="*60)
    print("üëâ ƒêƒÉng nh·∫≠p v√†o cuutruyen.net")
    print("="*60)
    driver.get("https://cuutruyen.net/")
    time.sleep(3)
    input("\nüëâ Nh·∫•n Enter sau khi ƒë√£ ƒëƒÉng nh·∫≠p...")
    return True

def search_and_click_result(driver, manga_name):
    """T√¨m ki·∫øm v√† click v√†o dropdown result"""
    print(f"\n[üîç] T√¨m: {manga_name}")
    
    try:
        # V·ªÅ trang ch·ªß
        driver.get("https://cuutruyen.net/")
        time.sleep(1.5)  # Gi·∫£m t·ª´ 3s ‚Üí 1.5s
        
        # T√¨m input search b·∫±ng JS (ƒë∆°n gi·∫£n h∆°n)
        search_input = driver.execute_script("""
            const inputs = document.querySelectorAll('input');
            for (let input of inputs) {
                const placeholder = (input.placeholder || '').toLowerCase();
                if (placeholder.includes('t√¨m') || placeholder.includes('search')) {
                    return input;
                }
            }
            return null;
        """)
        
        if not search_input:
            print("[ERROR] Kh√¥ng t√¨m th·∫•y search box")
            return False
        
        # Clear v√† nh·∫≠p text b·∫±ng JS
        driver.execute_script("arguments[0].value = '';", search_input)
        driver.execute_script(f"arguments[0].value = '{manga_name}';", search_input)
        
        # Trigger input event
        driver.execute_script("""
            arguments[0].dispatchEvent(new Event('input', { bubbles: true }));
        """, search_input)
        
        print("[OK] ƒê√£ nh·∫≠p")
        
        # ƒê·ª£i dropdown xu·∫•t hi·ªán (2 gi√¢y thay v√¨ 3)
        time.sleep(2)
        
        # T√¨m k·∫øt qu·∫£ trong dropdown
        # D·ª±a v√†o ·∫£nh: c√≥ div ch·ª©a text "S·ª± Quy·∫øn R≈© C·ªßa 2.5D"
        results = driver.execute_script("""
            // T√¨m t·∫•t c·∫£ link c√≥ href ch·ª©a /mangas/
            const links = document.querySelectorAll('a[href*="/mangas/"]');
            const results = [];
            
            for (let link of links) {
                // Ch·ªâ l·∫•y link visible
                if (link.offsetParent !== null) {
                    const rect = link.getBoundingClientRect();
                    // Ch·ªâ l·∫•y link ·ªü ph·∫ßn tr√™n c·ªßa trang (dropdown)
                    if (rect.top < 400) {
                        results.push({
                            href: link.href,
                            text: link.textContent.trim(),
                            element: link
                        });
                    }
                }
            }
            
            return results;
        """)
        
        if not results:
            print("[ERROR] Kh√¥ng t√¨m th·∫•y")
            return False
        
        print(f"[OK] T√¨m th·∫•y {len(results)} k·∫øt qu·∫£")
        
        # L·∫•y URL c·ªßa k·∫øt qu·∫£ ƒë·∫ßu ti√™n
        first_url = results[0]['href']
        
        # Navigate ƒë·∫øn URL
        driver.get(first_url)
        time.sleep(1.5)  # Gi·∫£m t·ª´ 3s ‚Üí 1.5s
        
        return True
        
    except Exception as e:
        print(f"[ERROR] L·ªói: {e}")
        import traceback
        traceback.print_exc()
        return False

def follow_manga(driver):
    """Click n√∫t THEO D√ïI TRUY·ªÜN"""
    try:
        url = driver.current_url
        
        if '/mangas/' not in url:
            return False
        
        time.sleep(1)  # Gi·∫£m t·ª´ 2s ‚Üí 1s
        
        # T√¨m n√∫t theo d√µi
        follow_btn = driver.execute_script("""
            const buttons = document.querySelectorAll('button');
            for (let btn of buttons) {
                const text = btn.textContent.toLowerCase();
                if (text.includes('theo d√µi') && btn.offsetParent !== null) {
                    return btn;
                }
            }
            return null;
        """)
        
        if follow_btn:
            # Scroll v√† click
            driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", follow_btn)
            time.sleep(0.3)  # Gi·∫£m t·ª´ 0.5s ‚Üí 0.3s
            driver.execute_script("arguments[0].click();", follow_btn)
            
            print(f"‚úÖ")
            time.sleep(0.5)  # Gi·∫£m t·ª´ 1s ‚Üí 0.5s
            return True
        else:
            print("[WARNING] Kh√¥ng t√¨m th·∫•y n√∫t 'THEO D√ïI'")
            return False
            
    except Exception as e:
        print(f"[ERROR] L·ªói: {e}")
        return False

def main():
    options = webdriver.ChromeOptions()
    options.add_argument('--disable-blink-features=AutomationControlled')
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    prefs = {"profile.default_content_setting_values.notifications": 2}
    options.add_experimental_option("prefs", prefs)
    
    print("üöÄ Kh·ªüi ƒë·ªông Chrome...")
    driver = webdriver.Chrome(
        service=Service(ChromeDriverManager().install()),
        options=options
    )
    driver.maximize_window()
    
    try:
        if not login_manual(driver):
            return
        
        with open(TRUYEN_FILE, "r", encoding="utf-8") as f:
            manga_list = [line.strip().replace("- ", "") for line in f if line.strip()]
        
        print(f"\nüìö T·ªïng: {len(manga_list)} truy·ªán")
        confirm = input("üëâ Nh·∫≠p s·ªë ƒë·ªÉ test ho·∫∑c 'all': ")
        
        if confirm.lower() == 'all':
            test_list = manga_list
        else:
            try:
                num = int(confirm)
                test_list = manga_list[:num]
            except:
                print("‚ùå Kh√¥ng h·ª£p l·ªá")
                return
        
        success = 0
        failed = []
        
        print(f"\nüé¨ B·∫Øt ƒë·∫ßu follow {len(test_list)} truy·ªán...")
        print("üí° TIP: B·∫°n c√≥ th·ªÉ Ctrl+C ƒë·ªÉ d·ª´ng b·∫•t c·ª© l√∫c n√†o\n")
        
        for i, manga in enumerate(test_list, 1):
            print(f"[{i}/{len(test_list)}] {manga[:40]}...")
            
            if search_and_click_result(driver, manga):
                if follow_manga(driver):
                    success += 1
                    print(f"‚úÖ {success}/{i}")
                else:
                    failed.append(manga)
                    print(f"‚ùå")
            else:
                failed.append(manga)
                print(f"‚è≠Ô∏è")
            
            # Delay gi·∫£m t·ª´ 2s ‚Üí 1s
            time.sleep(1)
        
        # Report
        print(f"\n{'='*60}")
        print(f"üéâ HO√ÄN T·∫§T")
        print(f"{'='*60}")
        print(f"‚úÖ Th√†nh c√¥ng: {success}/{len(test_list)}")
        print(f"‚ùå Th·∫•t b·∫°i: {len(failed)}")
        print(f"üìä T·ª∑ l·ªá: {success/len(test_list)*100:.1f}%")
        
        if failed and len(failed) <= 15:
            print(f"\n‚ùå Danh s√°ch th·∫•t b·∫°i:")
            for m in failed:
                print(f"  - {m}")
        
        if success == len(test_list):
            print("\nüéä PERFECT! T·∫•t c·∫£ ƒë·ªÅu th√†nh c√¥ng!")
            print("üëâ B·∫°n c√≥ th·ªÉ ch·∫°y l·∫°i v·ªõi 'all' ƒë·ªÉ follow h·∫øt!")
        
    except KeyboardInterrupt:
        print(f"\n\n‚è∏Ô∏è ƒê√£ d·ª´ng b·ªüi ng∆∞·ªùi d√πng")
        print(f"‚úÖ ƒê√£ follow: {success} truy·ªán")
    except Exception as e:
        print(f"\n‚ùå L·ªói kh√¥ng mong mu·ªën: {e}")
        import traceback
        traceback.print_exc()
    finally:
        input("\nüëâ Nh·∫•n Enter ƒë·ªÉ ƒë√≥ng Chrome...")
        driver.quit()

if __name__ == "__main__":
    print("="*60)
    print("üéØ CUUTRUYEN AUTO FOLLOW - TURBO MODE")
    print("="*60)
    print("‚ö° T·ªëc ƒë·ªô: ~3-4s/truy·ªán (nhanh g·∫•p ƒë√¥i)")
    print("‚è±Ô∏è  199 truy·ªán: ~10-12 ph√∫t")
    print("‚úÖ Gi·∫£m delay, t·ªëi ∆∞u output")
    print("="*60)
    
    proceed = input("\nüëâ B·∫Øt ƒë·∫ßu? (yes/no): ")
    if proceed.lower() in ["yes", "y"]:
        main()
    else:

        print("‚ùå H·ªßy")
